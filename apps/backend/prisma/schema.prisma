// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Pedido {
  id          String       @id @default(uuid())
  dataCriacao DateTime     @default(now())
  status      StatusPedido
  realizadoEm DateTime?
  itens       ItemPedido[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("pedidos")
}

model ItemPedido {
  id            String   @id @default(uuid())
  pedidoId      String
  produtoId     String
  quantidade    Int
  valorUnitario Float
  pedido        Pedido   @relation(fields: [pedidoId], references: [id])
  produto       Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("itens_pedido")
}

model Colecao {
  id        String           @id @default(uuid())
  nome      String
  slug      String           @unique
  produtos  ProdutoColecao[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("colecoes")
}

model Produto {
  id        String           @id @default(uuid())
  nome      String
  marca     String
  preco     Float
  slug      String           @unique
  colecoes  ProdutoColecao[]
  tamanhos  TamanhoProduto[]
  imagens   ImagemProduto[]
  itens     ItemPedido[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("produtos")
}

// Tabela de junção para relação muitos-para-muitos entre Produto e Colecao
model ProdutoColecao {
  id        String   @id @default(uuid())
  produtoId String
  colecaoId String
  produto   Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  colecao   Colecao  @relation(fields: [colecaoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([produtoId, colecaoId])
  @@map("produtos_colecoes")
}

model TamanhoProduto {
  id        String   @id @default(uuid())
  produtoId String
  tamanho   Int
  produto   Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([produtoId, tamanho])
  @@map("tamanhos_produto")
}

model ImagemProduto {
  id        String   @id @default(uuid())
  produtoId String
  url       String
  descricao String
  principal Boolean  @default(false)
  produto   Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("imagens_produto")
}

enum StatusPedido {
  CRIADO
  EM_PROCESSAMENTO
  APROVADO
  REJEITADO
}
