# üåê Domain-Driven Design (DDD)

- Cada pasta em `packages/` representa um bounded context (subdom√≠nio).
- Use a separa√ß√£o clara entre `domain`, `application`, `infrastructure` e `interface`.
- L√≥gica de neg√≥cio vive nas entidades (no dom√≠nio), nunca nos UseCases.
- UseCases apenas orquestram o fluxo chamando entidades, services e ports.
- Use portas e adaptadores: interfaces no `application`, implementa√ß√µes no `infrastructure`.
- Nunca acople useCases a bibliotecas externas ou banco de dados diretamente.
- Entidades devem ter comportamento, n√£o s√≥ dados.

---

# üöÄ Backend (NestJS com DDD)

- Cada m√≥dulo NestJS representa uma interface de entrada para um subdom√≠nio.
- Controllers n√£o t√™m l√≥gica de neg√≥cio: apenas recebem requisi√ß√µes e disparam UseCases.
- Use `execute(dto): output` como padr√£o de interface de UseCase.
- Use `class-validator` somente nos DTOs no controller.
- Cada camada (`domain`, `application`, etc.) vive separada por subdom√≠nio.
- Adapters implementam interfaces (ports) e ficam em `infrastructure`.
- Use Dependency Injection com tokens baseados em interface (ports).
- Teste UseCases e entidades isoladamente, sem acoplamento ao Nest.

---

# üíª Frontend (Next.js + React)

- Organize os recursos por dom√≠nio: `features/auth`, `features/orders`, etc.
- Cada endpoint em `/api/` deve executar um √∫nico UseCase do backend.
- Nada de l√≥gica de neg√≥cio no frontend ‚Äî apenas chamada ao backend + exibi√ß√£o.
- Use React Query (TanStack Query) para data-fetching e sincroniza√ß√£o de estado.
- Use React Hook Form para formul√°rios e Zod para valida√ß√£o.
- Componentes devem ser puros, stateless sempre que poss√≠vel.
- Prefira `app/` router e componha p√°ginas com `layout.tsx` e `page.tsx`.

---

# üß± Projeto Geral & Estilo

- Use TypeScript com modo estrito ativado.
- Nomeie arquivos de componentes em PascalCase.
- Exporte componentes com exporta√ß√£o nomeada (`export function`).
- Evite enums e `any`. Prefira objetos mapeadores e tipos expl√≠citos.
- Pastas em kebab-case (ex: `user-profile`, `auth-service`).
- Use Prettier para formata√ß√£o e ESLint com Airbnb/Next rules.
- Centralize constantes e types em pastas como `@/shared/constants` e `@/shared/types`.
